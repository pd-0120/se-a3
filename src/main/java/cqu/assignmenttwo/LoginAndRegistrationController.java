package cqu.assignmenttwo;

import static cqu.assignmenttwo.Role.DISASTER_EVENT_ASSISTANT;
import static cqu.assignmenttwo.Role.DISASTER_EVENT_MANAGER;
import static cqu.assignmenttwo.Role.EMERGENCY_RESPONDER;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.Query;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.LinkedList;
import java.util.List;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;

/**
 * FXML Controller class
 *
 * @author AndresPinilla 12243141
 *
 * This class is to control the DisasterAssistantMenu.fxml,
 * DisasterManagerMenu.fxml, EmergencyResponderMenu.fxml, and the Login.fxml. It
 * has multiple a List to store the user's input and key events and key actions
 * methods to handle the user interaction.
 */
public class LoginAndRegistrationController {

    // Stores all the staff.
    private List<Staff> staffList = new LinkedList<>();

    // FXML buttons, labels, combobox text areas and text fields from Login screen.
    @FXML
    private PasswordField staffPassword;
    @FXML
    private TextField staffEmail;
    @FXML
    private Label staffNotRegisteredLabel;
    @FXML
    private ComboBox<Role> roleComboboxLogin;

    /**
     * Initializes the comboboxes in the login and the staff registration
     * screen. Initializes the staffIdRegistration in the staff registration
     * screen.
     *
     */
    @FXML
    private void initialize() {
        initializeLoginScreen();
        initializeStaffRegistrationScreen();
    }

    /**
     * This method is to initialize the roleComboboxLogin with the options of
     * role enum.
     */
    private void initializeLoginScreen() {
        if (roleComboboxLogin != null) {
            ObservableList<Role> roleOptions
                    = FXCollections.observableArrayList(Role.values());
            roleComboboxLogin.setItems(roleOptions);
            // Sets the font style
            roleComboboxLogin.setStyle("-fx-font-family: 'Arial'");
        }
    }

    /**
     * This method is to initialize the roleComboboxRegistration with the
     * options of role enum.
     */
    private void initializeStaffRegistrationScreen() {
        if (roleComboboxRegistration != null) {
            ObservableList<Role> roleOptions
                    = FXCollections.observableArrayList(Role.values());
            roleComboboxRegistration.setItems(roleOptions);

            // Sets the font style.
            roleComboboxRegistration.setStyle("-fx-font-family: 'Arial'");

            // Generate and set the auto-generated staff ID
            String autogeneratedStaffId = generateStaffAutoId();
            staffIdRegistration.setText(autogeneratedStaffId);
        }
    }

    // Event Controllers from Login screen.
    @FXML
    private void staffEmail(KeyEvent event) {
    }

    @FXML
    private void staffPassword(KeyEvent event) {
    }

    /**
     * This section is to control the signUp button in the login screen. If the
     * user click the button the staff registration screen is displayed.
     *
     * @param event the user clicks the signUp button.
     */
    @FXML
    private void signUpStaffButton(ActionEvent event) {
        try {
            App.setRoot("StaffRegistration");
        } catch (IOException e) {
            // Handle IOException if there is an issue loading the new screen.
            e.printStackTrace();
        }
    }

    /**
     * This section is to control the back button in the login screen. If the
     * user click the button the primary screen is displayed.
     *
     * @param event the user clicks the signUp button.
     */
    @FXML
    private void backButton(ActionEvent event) {
        try {
            App.setRoot("Primary");
        } catch (IOException e) {
            // Handle IOException if there is an issue loading the new screen.
            e.printStackTrace();
        }
    }

    /**
     * This section is to control the login button in the Login screen, if the
     * email is registered and the password is correct the program will display
     * the next screen based on the role selected. If the email is not
     * registered or the password is incorrect the program will make a label
     * visible to display the error message.
     */
    @FXML
    private void loginButton(ActionEvent event) {
        try {
            // Get the input values from the TextFields
            String emailAddress = staffEmail.getText();
            String password = staffPassword.getText();
            Role selectedRole = roleComboboxLogin.getValue();

            // Check if the credentials exist in Staff.csv
            if (isRegistered(emailAddress, password)) {
                // loads to the next screen based on the role selected.
                switch (selectedRole) {
                    case DISASTER_EVENT_ASSISTANT:
                        App.setRoot("DisasterAssistant");
                        break;
                    case DISASTER_EVENT_MANAGER:
                        App.setRoot("DisasterManager");
                        break;
                    case EMERGENCY_RESPONDER:
                        App.setRoot("EmergencyResponder");
                        break;
                }

            } else {
                // Display the "Login Failed" message using a label
                showErrorMessage("Login Failed: The email entered is not "
                        + "registered \nor the password might be wrong");
            }
        } catch (IOException e) {
            // Handle IOException if there is an issue.
            e.printStackTrace();

        }
    }

    /**
     * This section is to check if the email and password are registered. It
     * reads the information from the Staff.csv file and validates if the user
     * is registered. It also handles the exception to load the fxml file and
     * the array out bonds.
     */
    private boolean isRegistered(String emailAddress, String password) {
        try {
            EntityManagerUtils emu = new EntityManagerUtils();
            EntityManager em = emu.getEm();

            Query query = em.createQuery("select s from staff s where email=" + emailAddress + " and password=" + password);
            query.setMaxResults(1);
            Staff staff = (Staff) query.getSingleResult();

        } catch (Exception e) {
            e.printStackTrace();
            // Handle IO exception, return false (credentials don't exist)
        }
        // Return false if credentials don't exist or an error occurred
        return false;
    }

    /**
     * This section is to make the error label visible and to set the message in
     * the Login screen.
     *
     */
    private void showErrorMessage(String message) {

        staffNotRegisteredLabel.setText(message);
        staffNotRegisteredLabel.setVisible(true);
    }

    // FXML buttons, labels, combobox text areas and text fields from 
    // StaffRegistration screen.
    @FXML
    private TextField staffIdRegistration;
    @FXML
    private ComboBox<Role> roleComboboxRegistration;
    @FXML
    private TextField staffNameRegistration;
    @FXML
    private TextField staffEmailRegistration;
    @FXML
    private PasswordField staffPasswordRegistration;
    @FXML
    private Label nameWrongStaffRegistrationLabel;
    @FXML
    private Label emptyFieldsStaffRegistrationLabel;

    // Event Controllers from StaffRegistration screen.
    @FXML
    private void staffNameRegistration(KeyEvent event) {
    }

    @FXML
    private void staffEmailRegistration(KeyEvent event) {
    }

    @FXML
    private void staffPasswordRegistration(KeyEvent event) {
    }

    /**
     * This section is to control the back button in the staff registration
     * screen. If the user click the button the primary screen is displayed.
     *
     * @param event the user clicks the signUp button.
     */
    @FXML
    private void registrationBackButtonController(ActionEvent event) {
        try {
            App.setRoot("Primary");
        } catch (IOException e) {
            // Handle IOException if there is an issue loading the new screen
            e.printStackTrace();
        }
    }

    /**
     * This section is to handle the register staff button. It validates if the
     * user provided a name in the right format and all the fields are filled,
     * if that so it proceed to create a new staff object.
     *
     * @param event the user clicks the button.
     */
    @FXML
    private void registerStaffButton(ActionEvent event) {

        // Check if there are only alphabets.
        if (staffNameIsWrong()) {
            // Display the error message using a label
            showStaffNameErrorMessage("Invalid input. \nStaff Name must contain "
                    + "only alphabets.");
        } else {
            // Hide the error message if the input becomes valid.
            nameWrongStaffRegistrationLabel.setVisible(false);
        }

        // Check if any of the specified fields is empty.
        if (staffRegistrationFieldsEmpty()) {
            // Display the error message using a label
            showStaffRegistrationErrorMessage("Staff Registration failed: " + "\nPlease make sure none of the fields are empty.");
        } else if (isUserExists(staffEmailRegistration.getText())) {
            emptyFieldsStaffRegistrationLabel.setText("User with same email id is exists. Please try different.");
            emptyFieldsStaffRegistrationLabel.setVisible(true);
        } else {
            // Hide the error message if the input is valid.
            emptyFieldsStaffRegistrationLabel.setVisible(false);

            if (!staffRegistrationFieldsEmpty() && !staffNameIsWrong()) {

                // Store the information in the Staff object.
                Staff staff = new Staff(
                        staffIdRegistration.getText(),
                        roleComboboxRegistration.getValue(),
                        staffNameRegistration.getText(),
                        staffEmailRegistration.getText(),
                        staffPasswordRegistration.getText());

                EntityManagerUtils emu = new EntityManagerUtils();
                EntityManager em = emu.getEm();
                
                em.getTransaction().begin();
                em.persist(staff);
                em.getTransaction().commit();

                try {
                    // Get the input values from the Combobox.
                    Role selectedRegistrationRole = roleComboboxRegistration.getValue();

                    // loads to the next screen based on the role selected.
                    switch (selectedRegistrationRole) {
                        case DISASTER_EVENT_ASSISTANT:
                            App.setRoot("DisasterAssistant");
                            break;
                        case DISASTER_EVENT_MANAGER:
                            App.setRoot("DisasterManager");
                            break;
                        case EMERGENCY_RESPONDER:
                            App.setRoot("EmergencyResponder");
                            break;
                    }
                } catch (IOException e) {
                    // Handle IOException if there is an issue.
                    e.printStackTrace();

                }
            }
        }
    }

    /**
     * This section is to check if reporter name contains only alphabets.
     *
     */
    private boolean staffNameIsWrong() {
        // Add checks for each specified field
        return !staffNameRegistration.getText().matches("^[a-zA-Z\\s]+$");
    }

    /**
     * This section is to check if any of the fields are empty.
     *
     */
    private boolean staffRegistrationFieldsEmpty() {
        // Add checks for each specified field
        return roleComboboxRegistration.getValue() == null
                || staffNameRegistration.getText().isEmpty()
                || staffEmailRegistration.getText().isEmpty()
                || staffPasswordRegistration.getText().isEmpty();
    }

    private void showStaffNameErrorMessage(String message) {
        nameWrongStaffRegistrationLabel.setText(message);
        nameWrongStaffRegistrationLabel.setVisible(true);
    }

    private boolean isUserExists(String email) {
        EntityManagerUtils emu = new EntityManagerUtils();
        EntityManager em = emu.getEm();

        Query query = em.createNamedQuery("findByEmailId");
        query.setParameter("emailAddress", email);
        List<Staff> staffList = query.getResultList();

        return !staffList.isEmpty();

    }

    private void showStaffRegistrationErrorMessage(String message) {
        emptyFieldsStaffRegistrationLabel.setText(message);
        emptyFieldsStaffRegistrationLabel.setVisible(true);
    }

    /**
     * This section generates an auto generated ID using a prefix and a
     * sequential number. It checks if the staff id exists in the Staff.csv to
     * prevent duplicities.
     */
    // Counter for generating sequential IDs
    private static int staffCounter = 1;

    private String generateStaffAutoId() {

        String prefix = "STAFF";

        String newId;

        // Load existing staff from the CSV file.
        List<Staff> existingStaff = FileUtility.loadStaffFromCsv("Staff.csv");

        while (true) {
            // Generate a simple sequential number.
            String sequentialPart = String.format("%03d", staffCounter);
            newId = prefix + sequentialPart;

            // Create a final variable for use in the lambda expression.
            final String idToCheck = newId;

            // Check if the generated ID already exists in the list of staff.
            boolean idExists = existingStaff.stream()
                    .anyMatch(staff -> staff.getIdStaff().equals(idToCheck));

            if (!idExists) {
                break;  // If the ID doesn't exist, exit the loop.
            }

            // Increment the counter for the next ID.
            staffCounter++;
        }

        return newId;
    }

    /**
     * This section is to control the prioritize button in the disaster
     * assistant menu screen.
     *
     * @param event the user clicks the button.
     */
    @FXML
    private void prioritizeButton(ActionEvent event) {
        try {
            App.setRoot("DisasterAssistant");
        } catch (IOException e) {
            // Handle IOException if there is an issue loading the new screen
            e.printStackTrace();
        }
    }

    /**
     * This section is to control the Go back to the main menu button in the
     * disaster assistant menu screen.
     *
     * @param event the user clicks the button.
     */
    @FXML
    private void mainMenuButton(ActionEvent event) {
        try {
            App.setRoot("Primary");
        } catch (IOException e) {
            // Handle IOException if there is an issue loading the new screen
            e.printStackTrace();
        }
    }

    /**
     * This section is to control the prioritize button in the emergency
     * responder menu screen.
     *
     * @param event the user clicks the button.
     */
    @FXML
    private void actionDoneButton(ActionEvent event) {
        try {
            App.setRoot("EmergencyResponder");
        } catch (IOException e) {
            // Handle IOException if there is an issue loading the new screen
            e.printStackTrace();
        }
    }

    /**
     * This section is to control the Go back to the main menu button in the
     * emergency responder menu screen.
     *
     * @param event the user clicks the button.
     */
    @FXML
    private void mainMenuActionDoneButton(ActionEvent event) {
        try {
            App.setRoot("Primary");
        } catch (IOException e) {
            // Handle IOException if there is an issue loading the new screen
            e.printStackTrace();
        }
    }

    /**
     * This section is to control the review a new report button in the disaster
     * manager menu screen.
     *
     * @param event the user clicks the button.
     */
    @FXML
    private void reviewNewReportButton(ActionEvent event) {
        try {
            App.setRoot("DisasterManager");
        } catch (IOException e) {
            // Handle IOException if there is an issue loading the new screen
            e.printStackTrace();
        }
    }

    /**
     * This section is to control the Go back to the main menu button in the
     * emergency responder menu screen.
     *
     * @param event the user clicks the button.
     */
    @FXML
    private void mainMenuActionManagerButton(ActionEvent event) {
        try {
            App.setRoot("Primary");
        } catch (IOException e) {
            // Handle IOException if there is an issue loading the new screen
            e.printStackTrace();
        }
    }
}
